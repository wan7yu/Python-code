"""
洛谷P1540
问题描述
对于每个英文单词，软件会先在内存中查找这个单词的中文含义，如果内存中有，软件就会用它进行翻译；
如果内存中没有，软件就会在外存中的词典内查找，查出单词的中文含义然后翻译，并将这个单词和译义放入内存，以备后续的查找和翻译。

假设内存中有 M 个单元，每单元能存放一个单词和译义。每当软件将一个新单词存入内存前，
如果当前内存中已存入的单词数不超过 M-1，软件会将新单词存入一个未使用的内存单元；
若内存中已存入 M 个单词，软件会清空最早进入内存的那个单词，腾出单元来，存放新单词。
假设一篇英语文章的长度为 N 个单词。给定这篇待译文章，翻译软件需要去外存查找多少次词典？
假设在翻译开始前，内存中没有任何单词。

输入格式
共 2 行。每行中两个数之间用一个空格隔开。

第一行为两个正整数 M,N 代表内存容量和文章的长度。

第二行为 N 个非负整数，按照文章的顺序，每个数（大小不超过 1000）代表一个英文单词。
文章中两个单词是同一个单词，当且仅当它们对应的非负整数相同。

输出格式
一个整数，为软件需要查词典的次数。
"""
# 3 7
# 1 2 1 5 4 4 1
m, n = map(int, input().split())
words = input().split()
for i in range(len(words)):
    words[i] = int(words[i])


def fun(m, n):
    # 哈希表存放已经存在内存中的单词
    hash_li = [0] * 1003
    # 队列，当成内存
    queue = []
    # 计数
    cnt = 0
    # 对于长度为n的文章
    for i in range(n):
        # 如果内存中的数少于内存容量
        if len(queue) < m:
            # 且内存中没有这个单词
            if not hash_li[words[i]]:
                # 加进内存中，存在内存中的单词用哈希表存储
                queue.append(words[i])
                hash_li[words[i]] = 1
                # 查字典的次数加一
                cnt += 1
        # 否则先让最先进入的单词出队
        else:
            if not hash_li[words[i]]:
                hash_li[queue.pop(0)] = 0
                queue.append(words[i])
                hash_li[words[i]] = 1
                cnt += 1
    return cnt


print(fun(m, n))
